<% layout('layout') -%>

<div class="mb-8">
    <h2 class="text-3xl font-bold text-gray-800 mb-2">Dashboard</h2>
    <p class="text-gray-600">Visão geral do sistema de gerenciamento de senhas</p>
</div>

<!-- Cards de Estatísticas -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8" id="statsCards">
    <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-yellow-500">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-gray-600 text-sm">Total de Senhas</p>
                <p class="text-2xl font-bold text-gray-800" id="totalSenhas">-</p>
            </div>
            <i class="fas fa-key text-yellow-500 text-2xl"></i>
        </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-blue-500">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-gray-600 text-sm">Prefeituras</p>
                <p class="text-2xl font-bold text-gray-800" id="totalPrefeituras">-</p>
            </div>
            <i class="fas fa-building text-blue-500 text-2xl"></i>
        </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-green-500">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-gray-600 text-sm">Fornecedores</p>
                <p class="text-2xl font-bold text-gray-800" id="totalFornecedores">-</p>
            </div>
            <i class="fas fa-truck text-green-500 text-2xl"></i>
        </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-red-500">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-gray-600 text-sm">Usuários Ativos</p>
                <p class="text-2xl font-bold text-gray-800" id="usuariosAtivos">-</p>
            </div>
            <i class="fas fa-users text-red-500 text-2xl"></i>
        </div>
    </div>
</div>

<!-- Gráficos e Informações -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
    <!-- Gráfico de Senhas por Categoria -->
    <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Senhas por Categoria</h3>
        <div id="chartContainer" class="h-64">
            <canvas id="categoryChart"></canvas>
        </div>
    </div>

    <!-- Senhas que Expiram em Breve -->
    <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Senhas que Expiram em Breve</h3>
        <div id="expiringPasswords" class="space-y-3 max-h-64 overflow-y-auto">
            <!-- Conteúdo será carregado via JavaScript -->
        </div>
    </div>
</div>

<!-- Últimas Alterações e Atividade Recente -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Últimas Senhas Criadas/Alteradas -->
    <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Últimas Senhas Criadas/Alteradas</h3>
        <div id="recentChanges" class="space-y-3">
            <!-- Conteúdo será carregado via JavaScript -->
        </div>
    </div>

    <!-- Atividade Recente do Sistema -->
    <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Atividade Recente</h3>
        <div id="recentActivity" class="space-y-3 max-h-64 overflow-y-auto">
            <!-- Conteúdo será carregado via JavaScript -->
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    let categoryChart = null;

    // Função para carregar estatísticas do dashboard
    async function loadDashboardStats() {
        try {
            showLoading(true);
            
            const response = await fetch('/api/dashboard/estatisticas');
            const result = await response.json();
            
            if (result.success) {
                const data = result.data;
                
                // Atualizar cards de estatísticas
                document.getElementById('totalSenhas').textContent = data.resumo.total_senhas;
                document.getElementById('totalPrefeituras').textContent = data.resumo.total_prefeituras;
                document.getElementById('totalFornecedores').textContent = data.resumo.total_fornecedores;
                document.getElementById('usuariosAtivos').textContent = data.resumo.usuarios_ativos;
                
                // Atualizar gráfico de categorias
                updateCategoryChart(data.categorias);
                
                // Atualizar senhas expirando
                updateExpiringPasswords(data.senhas_expirando);
                
                // Atualizar últimas alterações
                updateRecentChanges(data.ultimas_alteracoes);
                
            } else {
                showAlert('Erro ao carregar estatísticas: ' + result.message, 'error');
            }
        } catch (error) {
            console.error('Erro ao carregar dashboard:', error);
            showAlert('Erro de conexão ao carregar dashboard', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Função para atualizar o gráfico de categorias
    function updateCategoryChart(categorias) {
        const ctx = document.getElementById('categoryChart').getContext('2d');
        
        if (categoryChart) {
            categoryChart.destroy();
        }
        
        const labels = ['Prefeituras', 'Fornecedores', 'Órgãos Gov.', 'B2Fleet'];
        const data = [
            categorias.prefeituras || 0,
            categorias.fornecedores || 0,
            categorias.orgaos || 0,
            categorias.b2fleet || 0
        ];
        
        categoryChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: [
                        '#3B82F6', // blue
                        '#10B981', // green
                        '#8B5CF6', // purple
                        '#F59E0B'  // yellow
                    ],
                    borderWidth: 2,
                    borderColor: '#ffffff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true
                        }
                    }
                }
            }
        });
    }

    // Função para atualizar senhas expirando
    function updateExpiringPasswords(senhasExpirando) {
        const container = document.getElementById('expiringPasswords');
        
        if (senhasExpirando.length === 0) {
            container.innerHTML = '<p class="text-gray-500 text-center py-4">Nenhuma senha expirando em breve</p>';
            return;
        }
        
        container.innerHTML = senhasExpirando.map(senha => {
            const diasRestantes = senha.dias_restantes;
            let alertClass = 'bg-yellow-50 border-yellow-400';
            let iconClass = 'text-yellow-500';
            
            if (diasRestantes <= 2) {
                alertClass = 'bg-red-50 border-red-400';
                iconClass = 'text-red-500';
            } else if (diasRestantes <= 7) {
                alertClass = 'bg-orange-50 border-orange-400';
                iconClass = 'text-orange-500';
            }
            
            return `
                <div class="flex items-center justify-between p-3 ${alertClass} rounded border-l-4">
                    <div>
                        <p class="font-medium text-gray-800">${senha.sistema}</p>
                        <p class="text-sm text-gray-600">${senha.nome_localidade || 'Sem localidade'}</p>
                    </div>
                    <div class="text-right">
                        <i class="fas fa-exclamation-triangle ${iconClass}"></i>
                        <p class="text-xs text-gray-500">${diasRestantes} dias</p>
                    </div>
                </div>
            `;
        }).join('');
    }

    // Função para atualizar últimas alterações
    function updateRecentChanges(ultimasAlteracoes) {
        const container = document.getElementById('recentChanges');
        
        if (ultimasAlteracoes.length === 0) {
            container.innerHTML = '<p class="text-gray-500 text-center py-4">Nenhuma alteração recente</p>';
            return;
        }
        
        container.innerHTML = ultimasAlteracoes.map(alteracao => {
            const dataFormatada = new Date(alteracao.atualizado_em).toLocaleString('pt-BR');
            
            return `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
                    <div>
                        <p class="font-medium text-gray-800">${alteracao.sistema}</p>
                        <p class="text-sm text-gray-600">
                            ${alteracao.nome_localidade || 'Sem localidade'} • 
                            ${alteracao.nome_atualizador || 'Sistema'}
                        </p>
                    </div>
                    <span class="text-xs text-gray-500">${dataFormatada}</span>
                </div>
            `;
        }).join('');
    }

    // Função para carregar atividade recente
    async function loadRecentActivity() {
        try {
            const response = await fetch('/api/dashboard/atividade/recente?limite=5');
            const result = await response.json();
            
            if (result.success) {
                updateRecentActivity(result.data.atividades);
            }
        } catch (error) {
            console.error('Erro ao carregar atividade recente:', error);
        }
    }

    // Função para atualizar atividade recente
    function updateRecentActivity(atividades) {
        const container = document.getElementById('recentActivity');
        
        if (atividades.length === 0) {
            container.innerHTML = '<p class="text-gray-500 text-center py-4">Nenhuma atividade recente</p>';
            return;
        }
        
        container.innerHTML = atividades.map(atividade => {
            const dataFormatada = new Date(atividade.criado_em).toLocaleString('pt-BR');
            
            return `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
                    <div>
                        <p class="font-medium text-gray-800">${atividade.acao}</p>
                        <p class="text-sm text-gray-600">
                            ${atividade.usuario_nome || 'Sistema'} • 
                            ${atividade.tipo_usuario || ''}
                        </p>
                    </div>
                    <span class="text-xs text-gray-500">${dataFormatada}</span>
                </div>
            `;
        }).join('');
    }

    // Função para mostrar/ocultar loading
    function showLoading(show) {
        const indicator = document.getElementById('loadingIndicator');
        if (show) {
            indicator.classList.add('show');
        } else {
            indicator.classList.remove('show');
        }
    }

    // Função para mostrar alertas
    function showAlert(message, type = 'error') {
        const container = document.getElementById('alertContainer');
        const alertClass = type === 'success' ? 'alert-success' : 'alert-error';
        
        container.innerHTML = `
            <div class="alert ${alertClass}">
                ${message}
            </div>
        `;
        
        setTimeout(() => {
            container.innerHTML = '';
        }, 5000);
    }

    // Carregar dados iniciais
    loadDashboardStats();
    loadRecentActivity();
    
    // Atualizar dados a cada 5 minutos
    setInterval(() => {
        loadDashboardStats();
        loadRecentActivity();
    }, 5 * 60 * 1000);
});
</script>

