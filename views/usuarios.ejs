<% layout('layout') -%>

<div class="flex justify-between items-center mb-6">
    <div>
        <h2 class="text-3xl font-bold text-gray-800 mb-2">Usuários</h2>
        <p class="text-gray-600">Gerencie os usuários do sistema</p>
    </div>
    <button onclick="openUsuarioModal()" class="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-3 rounded-lg transition duration-200 flex items-center space-x-2">
        <i class="fas fa-plus"></i>
        <span>Novo Usuário</span>
    </button>
</div>

<!-- Filtros -->
<div class="bg-white rounded-lg shadow-md mb-6">
    <div class="p-6 border-b border-gray-200">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="relative">
                <input 
                    type="text" 
                    id="searchInput"
                    placeholder="Buscar por nome ou email..." 
                    class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                >
                <i class="fas fa-search absolute left-3 top-3 text-gray-400 pointer-events-none"></i>
            </div>
            <div>
                <select id="tipoFilter" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-yellow-500">
                    <option value="">Todos os tipos</option>
                    <option value="administrador">Administrador</option>
                    <option value="analista">Analista</option>
                </select>
            </div>
            <div>
                <select id="statusFilter" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-yellow-500">
                    <option value="">Todos os status</option>
                    <option value="true">Ativo</option>
                    <option value="false">Inativo</option>
                </select>
            </div>
            <div>
                <button onclick="clearFilters()" class="w-full bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition duration-200">
                    <i class="fas fa-times mr-2"></i>
                    Limpar Filtros
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Tabela de Usuários -->
<div class="bg-white rounded-lg shadow-md">
    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nome</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Último Acesso</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Criado em</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="usuarioTableBody">
                <!-- Dados serão inseridos aqui via JavaScript -->
            </tbody>
        </table>
    </div>
    
    <!-- Loading -->
    <div id="tableLoading" class="text-center py-8 hidden">
        <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
        <p class="text-gray-500 mt-2">Carregando usuários...</p>
    </div>
    
    <!-- Empty State -->
    <div id="emptyState" class="text-center py-8 hidden">
        <i class="fas fa-users text-4xl text-gray-300 mb-4"></i>
        <p class="text-gray-500">Nenhum usuário encontrado</p>
    </div>
</div>

<!-- Paginação -->
<div id="paginationContainer" class="mt-6"></div>

<!-- Modal de Usuário -->
<div id="usuarioModal" class="modal">
    <div class="modal-content max-w-lg">
        <div class="modal-header">
            <h3 class="modal-title" id="modalTitle">Novo Usuário</h3>
            <button class="modal-close" onclick="UI.closeModal('usuarioModal')">&times;</button>
        </div>
        
        <form id="usuarioForm" class="space-y-4">
            <input type="hidden" id="usuarioId" name="id">
            
            <div>
                <label class="form-label">Nome *</label>
                <input type="text" name="nome" class="form-input" required maxlength="100">
            </div>
            
            <div>
                <label class="form-label">Email *</label>
                <input type="email" name="email" class="form-input" required maxlength="150">
            </div>
            
            <div>
                <label class="form-label">Tipo de Usuário *</label>
                <select name="tipo_usuario" class="form-select" required>
                    <option value="">Selecione...</option>
                    <option value="administrador">Administrador</option>
                    <option value="analista">Analista</option>
                </select>
                <small class="text-gray-500">
                    <strong>Administrador:</strong> Acesso completo ao sistema<br>
                    <strong>Analista:</strong> Apenas visualização de senhas
                </small>
            </div>
            
            <div id="senhaContainer">
                <label class="form-label">Senha *</label>
                <div class="relative">
                    <input type="password" name="senha" id="senhaInput" class="form-input pr-12" required minlength="6">
                    <button type="button" onclick="togglePasswordVisibility('senhaInput')" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                <small class="text-gray-500">Mínimo de 6 caracteres</small>
            </div>
            
            <div class="flex items-center" id="statusContainer" style="display: none;">
                <input type="checkbox" name="ativo" id="ativoCheckbox" class="mr-2">
                <label for="ativoCheckbox" class="text-sm text-gray-700">Usuário ativo</label>
            </div>
            
            <div class="flex justify-end space-x-4 pt-4">
                <button type="button" onclick="UI.closeModal('usuarioModal')" class="btn-secondary">
                    Cancelar
                </button>
                <button type="submit" class="btn-primary">
                    <span id="submitBtnText">Salvar</span>
                    <i id="submitSpinner" class="fas fa-spinner fa-spin ml-2 hidden"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Modal de Resetar Senha -->
<div id="resetPasswordModal" class="modal">
    <div class="modal-content max-w-md">
        <div class="modal-header">
            <h3 class="modal-title">Resetar Senha</h3>
            <button class="modal-close" onclick="UI.closeModal('resetPasswordModal')">&times;</button>
        </div>
        
        <form id="resetPasswordForm" class="space-y-4">
            <input type="hidden" id="resetUserId">
            
            <div>
                <p class="text-gray-600 mb-4">Digite a nova senha para o usuário <strong id="resetUserName"></strong>:</p>
                
                <label class="form-label">Nova Senha *</label>
                <div class="relative">
                    <input type="password" name="nova_senha" id="novaSenhaInput" class="form-input pr-12" required minlength="6">
                    <button type="button" onclick="togglePasswordVisibility('novaSenhaInput')" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                <small class="text-gray-500">Mínimo de 6 caracteres</small>
            </div>
            
            <div class="flex justify-end space-x-4 pt-4">
                <button type="button" onclick="UI.closeModal('resetPasswordModal')" class="btn-secondary">
                    Cancelar
                </button>
                <button type="submit" class="btn-primary">
                    <span id="resetBtnText">Resetar Senha</span>
                    <i id="resetSpinner" class="fas fa-spinner fa-spin ml-2 hidden"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
let currentPage = 1;
let currentFilters = {};

document.addEventListener('DOMContentLoaded', function() {
    loadUsuarios();
    setupEventListeners();
});

function setupEventListeners() {
    // Busca com debounce
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', Utils.debounce(function() {
        currentFilters.busca = this.value;
        currentPage = 1;
        loadUsuarios();
    }, 500));
    
    // Filtros
    document.getElementById('tipoFilter').addEventListener('change', function() {
        currentFilters.tipo_usuario = this.value;
        currentPage = 1;
        loadUsuarios();
    });
    
    document.getElementById('statusFilter').addEventListener('change', function() {
        currentFilters.ativo = this.value;
        currentPage = 1;
        loadUsuarios();
    });
    
    // Form submissions
    document.getElementById('usuarioForm').addEventListener('submit', handleUsuarioSubmit);
    document.getElementById('resetPasswordForm').addEventListener('submit', handleResetPasswordSubmit);
}

async function loadUsuarios() {
    try {
        showTableLoading(true);
        
        const params = new URLSearchParams({
            pagina: currentPage,
            limite: 20,
            ...currentFilters
        });
        
        const { data } = await API.get(`/usuarios?${params}`);
        
        if (data.success) {
            updateUsuarioTable(data.data.usuarios);
            updatePagination(data.data.paginacao);
        } else {
            UI.showAlert('Erro ao carregar usuários: ' + data.message, 'error');
        }
    } catch (error) {
        console.error('Erro ao carregar usuários:', error);
        UI.showAlert('Erro de conexão ao carregar usuários', 'error');
    } finally {
        showTableLoading(false);
    }
}

function updateUsuarioTable(usuarios) {
    const tbody = document.getElementById('usuarioTableBody');
    const emptyState = document.getElementById('emptyState');
    
    if (usuarios.length === 0) {
        tbody.innerHTML = '';
        emptyState.classList.remove('hidden');
        return;
    }
    
    emptyState.classList.add('hidden');
    
    tbody.innerHTML = usuarios.map(usuario => {
        const tipoBadge = usuario.tipo_usuario === 'administrador' 
            ? '<span class="badge badge-danger">Administrador</span>'
            : '<span class="badge badge-info">Analista</span>';
            
        const statusBadge = usuario.ativo 
            ? '<span class="badge badge-success">Ativo</span>'
            : '<span class="badge badge-secondary">Inativo</span>';
            
        const isCurrentUser = window.APP_CONFIG.user && window.APP_CONFIG.user.id === usuario.id;
        
        return `
            <tr class="hover:bg-gray-50 ${isCurrentUser ? 'bg-yellow-50' : ''}">
                <td class="px-6 py-4">
                    <div class="font-medium text-gray-900">
                        ${usuario.nome}
                        ${isCurrentUser ? '<span class="text-xs text-yellow-600 ml-2">(Você)</span>' : ''}
                    </div>
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">
                    ${usuario.email}
                </td>
                <td class="px-6 py-4">
                    ${tipoBadge}
                </td>
                <td class="px-6 py-4">
                    ${statusBadge}
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">
                    ${usuario.ultimo_acesso ? Utils.formatDate(usuario.ultimo_acesso) : 'Nunca'}
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">
                    ${Utils.formatDate(usuario.criado_em)}
                </td>
                <td class="px-6 py-4 text-sm font-medium space-x-2">
                    <button onclick="editUsuario('${usuario.id}')" class="text-yellow-600 hover:text-yellow-900" title="Editar">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="resetPassword('${usuario.id}', '${usuario.nome}')" class="text-blue-600 hover:text-blue-900" title="Resetar Senha">
                        <i class="fas fa-key"></i>
                    </button>
                    ${!isCurrentUser ? `
                    <button onclick="toggleUsuarioStatus('${usuario.id}', '${usuario.nome}', ${usuario.ativo})" class="${usuario.ativo ? 'text-red-600 hover:text-red-900' : 'text-green-600 hover:text-green-900'}" title="${usuario.ativo ? 'Desativar' : 'Ativar'}">
                        <i class="fas fa-${usuario.ativo ? 'times' : 'check'}"></i>
                    </button>
                    ` : ''}
                </td>
            </tr>
        `;
    }).join('');
}

function updatePagination(paginacao) {
    UI.updatePagination('paginationContainer', paginacao.pagina_atual, paginacao.total_paginas, 'changePage');
}

function changePage(page) {
    currentPage = page;
    loadUsuarios();
}

function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('tipoFilter').value = '';
    document.getElementById('statusFilter').value = '';
    currentFilters = {};
    currentPage = 1;
    loadUsuarios();
}

function showTableLoading(show) {
    const loading = document.getElementById('tableLoading');
    const tbody = document.getElementById('usuarioTableBody');
    
    if (show) {
        loading.classList.remove('hidden');
        tbody.innerHTML = '';
    } else {
        loading.classList.add('hidden');
    }
}

function openUsuarioModal(usuarioId = null) {
    const modal = document.getElementById('usuarioModal');
    const form = document.getElementById('usuarioForm');
    const title = document.getElementById('modalTitle');
    const senhaContainer = document.getElementById('senhaContainer');
    const statusContainer = document.getElementById('statusContainer');
    const senhaInput = document.getElementById('senhaInput');
    
    FormHelpers.clear(form);
    
    if (usuarioId) {
        title.textContent = 'Editar Usuário';
        senhaContainer.style.display = 'none';
        statusContainer.style.display = 'flex';
        senhaInput.required = false;
        loadUsuarioForEdit(usuarioId);
    } else {
        title.textContent = 'Novo Usuário';
        senhaContainer.style.display = 'block';
        statusContainer.style.display = 'none';
        senhaInput.required = true;
        document.getElementById('usuarioId').value = '';
    }
    
    UI.showModal('usuarioModal');
}

async function loadUsuarioForEdit(usuarioId) {
    try {
        UI.showLoading(true);
        
        const { data } = await API.get(`/usuarios/${usuarioId}`);
        
        if (data.success) {
            const usuario = data.data.usuario;
            FormHelpers.populate('usuarioForm', usuario);
            document.getElementById('usuarioId').value = usuarioId;
            document.getElementById('ativoCheckbox').checked = usuario.ativo;
        } else {
            UI.showAlert('Erro ao carregar usuário: ' + data.message, 'error');
        }
    } catch (error) {
        console.error('Erro ao carregar usuário:', error);
        UI.showAlert('Erro de conexão ao carregar usuário', 'error');
    } finally {
        UI.showLoading(false);
    }
}

async function handleUsuarioSubmit(e) {
    e.preventDefault();
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const submitBtnText = document.getElementById('submitBtnText');
    const submitSpinner = document.getElementById('submitSpinner');
    
    try {
        submitBtn.disabled = true;
        submitBtnText.textContent = 'Salvando...';
        submitSpinner.classList.remove('hidden');
        
        const formData = FormHelpers.serialize(e.target);
        const usuarioId = document.getElementById('usuarioId').value;
        
        // Converter checkbox para boolean
        if (usuarioId) {
            formData.ativo = document.getElementById('ativoCheckbox').checked;
        }
        
        let response;
        if (usuarioId) {
            response = await API.put(`/usuarios/${usuarioId}`, formData);
        } else {
            response = await API.post('/usuarios', formData);
        }
        
        if (response.data.success) {
            UI.showAlert(usuarioId ? 'Usuário atualizado com sucesso!' : 'Usuário criado com sucesso!', 'success');
            UI.closeModal('usuarioModal');
            loadUsuarios();
        } else {
            UI.showAlert(response.data.message || 'Erro ao salvar usuário', 'error');
        }
    } catch (error) {
        console.error('Erro ao salvar usuário:', error);
        UI.showAlert('Erro de conexão ao salvar usuário', 'error');
    } finally {
        submitBtn.disabled = false;
        submitBtnText.textContent = 'Salvar';
        submitSpinner.classList.add('hidden');
    }
}

function editUsuario(usuarioId) {
    openUsuarioModal(usuarioId);
}

function resetPassword(usuarioId, nomeUsuario) {
    document.getElementById('resetUserId').value = usuarioId;
    document.getElementById('resetUserName').textContent = nomeUsuario;
    document.getElementById('resetPasswordForm').reset();
    UI.showModal('resetPasswordModal');
}

async function handleResetPasswordSubmit(e) {
    e.preventDefault();
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const submitBtnText = document.getElementById('resetBtnText');
    const submitSpinner = document.getElementById('resetSpinner');
    
    try {
        submitBtn.disabled = true;
        submitBtnText.textContent = 'Resetando...';
        submitSpinner.classList.remove('hidden');
        
        const formData = FormHelpers.serialize(e.target);
        const usuarioId = document.getElementById('resetUserId').value;
        
        const { data } = await API.post(`/usuarios/${usuarioId}/resetar-senha`, formData);
        
        if (data.success) {
            UI.showAlert('Senha resetada com sucesso!', 'success');
            UI.closeModal('resetPasswordModal');
        } else {
            UI.showAlert(data.message || 'Erro ao resetar senha', 'error');
        }
    } catch (error) {
        console.error('Erro ao resetar senha:', error);
        UI.showAlert('Erro de conexão ao resetar senha', 'error');
    } finally {
        submitBtn.disabled = false;
        submitBtnText.textContent = 'Resetar Senha';
        submitSpinner.classList.add('hidden');
    }
}

function toggleUsuarioStatus(usuarioId, nome, isActive) {
    const action = isActive ? 'desativar' : 'ativar';
    const message = `Tem certeza que deseja ${action} o usuário "${nome}"?`;
    
    UI.confirm(message, async () => {
        try {
            UI.showLoading(true);
            
            const { data } = await API.put(`/usuarios/${usuarioId}`, {
                ativo: !isActive
            });
            
            if (data.success) {
                UI.showAlert(`Usuário ${isActive ? 'desativado' : 'ativado'} com sucesso!`, 'success');
                loadUsuarios();
            } else {
                UI.showAlert('Erro ao alterar status: ' + data.message, 'error');
            }
        } catch (error) {
            console.error('Erro ao alterar status:', error);
            UI.showAlert('Erro de conexão ao alterar status', 'error');
        } finally {
            UI.showLoading(false);
        }
    });
}

function togglePasswordVisibility(inputId) {
    const input = document.getElementById(inputId);
    const button = input.nextElementSibling;
    const icon = button.querySelector('i');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}
</script>

