<% layout('layout') -%>

<div class="flex justify-between items-center mb-6">
    <div>
        <h2 class="text-3xl font-bold text-gray-800 mb-2">Gerenciamento de Senhas</h2>
        <p class="text-gray-600" id="passwordSectionSubtitle">Gerencie suas credenciais de acesso</p>
    </div>
    <% if (user.tipo_usuario === 'administrador') { %>
    <button onclick="openPasswordModal()" class="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-3 rounded-lg transition duration-200 flex items-center space-x-2">
        <i class="fas fa-plus"></i>
        <span>Nova Senha</span>
    </button>
    <% } %>
</div>

<!-- Filtros -->
<div class="bg-white rounded-lg shadow-md mb-6">
    <div class="p-6 border-b border-gray-200">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <input 
                    type="text" 
                    id="searchInput"
                    placeholder="Buscar..." 
                    class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                >
                <i class="fas fa-search absolute left-3 top-3 text-gray-400 pointer-events-none"></i>
            </div>
            <div>
                <select id="categoryFilter" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-yellow-500">
                    <option value="">Todas as categorias</option>
                    <option value="prefeituras">Prefeituras</option>
                    <option value="fornecedores">Fornecedores</option>
                    <option value="orgaos">Órgãos Governamentais</option>
                    <option value="b2fleet">B2Fleet e Locadoras</option>
                </select>
            </div>
            <div>
                <select id="localidadeFilter" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-yellow-500">
                    <option value="">Todas as localidades</option>
                </select>
            </div>
            <div>
                <button onclick="clearFilters()" class="w-full bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition duration-200">
                    <i class="fas fa-times mr-2"></i>
                    Limpar Filtros
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Tabela de Senhas -->
<div class="bg-white rounded-lg shadow-md">
    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sistema</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoria</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Localidade</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usuário</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">URL</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Última Atualização</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="passwordTableBody">
                <!-- Dados serão inseridos aqui via JavaScript -->
            </tbody>
        </table>
    </div>
    
    <!-- Loading -->
    <div id="tableLoading" class="text-center py-8 hidden">
        <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
        <p class="text-gray-500 mt-2">Carregando senhas...</p>
    </div>
    
    <!-- Empty State -->
    <div id="emptyState" class="text-center py-8 hidden">
        <i class="fas fa-key text-4xl text-gray-300 mb-4"></i>
        <p class="text-gray-500">Nenhuma senha encontrada</p>
    </div>
</div>

<!-- Paginação -->
<div id="paginationContainer" class="mt-6"></div>

<!-- Modal de Senha -->
<div id="passwordModal" class="modal">
    <div class="modal-content max-w-2xl">
        <div class="modal-header">
            <h3 class="modal-title" id="modalTitle">Nova Senha</h3>
            <button class="modal-close" onclick="UI.closeModal('passwordModal')">&times;</button>
        </div>
        
        <form id="passwordForm" class="space-y-4">
            <input type="hidden" id="passwordId" name="id">
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="form-label">Sistema *</label>
                    <input type="text" name="sistema" class="form-input" required>
                </div>
                <div>
                    <label class="form-label">Categoria *</label>
                    <select name="categoria" class="form-select" required>
                        <option value="">Selecione...</option>
                        <option value="prefeituras">Prefeituras</option>
                        <option value="fornecedores">Fornecedores</option>
                        <option value="orgaos">Órgãos Governamentais</option>
                        <option value="b2fleet">B2Fleet e Locadoras</option>
                    </select>
                </div>
            </div>
            
            <div>
                <label class="form-label">Localidade</label>
                <select name="localidade_id" class="form-select" id="modalLocalidadeSelect">
                    <option value="">Selecione...</option>
                </select>
            </div>
            
            <div>
                <label class="form-label">URL</label>
                <input type="url" name="url" class="form-input" placeholder="https://...">
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="form-label">Usuário *</label>
                    <input type="text" name="usuario" class="form-input" required>
                </div>
                <div>
                    <label class="form-label">Senha *</label>
                    <div class="relative">
                        <input type="password" name="senha" class="form-input pr-12" required>
                        <button type="button" onclick="togglePasswordVisibility('senha')" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="form-label">Data de Expiração</label>
                    <input type="date" name="data_expiracao" class="form-input">
                </div>
                <div>
                    <label class="form-label">Dias de Aviso</label>
                    <input type="number" name="dias_aviso_expiracao" class="form-input" value="30" min="1" max="365">
                </div>
            </div>
            
            <div>
                <label class="form-label">Observações</label>
                <textarea name="observacoes" class="form-input" rows="3"></textarea>
            </div>
            
            <div class="flex items-center">
                <input type="checkbox" name="notificar_expiracao" id="notificarExpiracao" class="mr-2" checked>
                <label for="notificarExpiracao" class="text-sm text-gray-700">Notificar sobre expiração</label>
            </div>
            
            <div class="flex justify-end space-x-4 pt-4">
                <button type="button" onclick="UI.closeModal('passwordModal')" class="btn-secondary">
                    Cancelar
                </button>
                <button type="submit" class="btn-primary">
                    <span id="submitBtnText">Salvar</span>
                    <i id="submitSpinner" class="fas fa-spinner fa-spin ml-2 hidden"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Modal de Visualização de Senha -->
<div id="viewPasswordModal" class="modal">
    <div class="modal-content max-w-lg">
        <div class="modal-header">
            <h3 class="modal-title">Visualizar Senha</h3>
            <button class="modal-close" onclick="UI.closeModal('viewPasswordModal')">&times;</button>
        </div>
        
        <div id="passwordDetails" class="space-y-4">
            <!-- Conteúdo será preenchido via JavaScript -->
        </div>
        
        <div class="flex justify-end pt-4">
            <button onclick="UI.closeModal('viewPasswordModal')" class="btn-secondary">
                Fechar
            </button>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
let currentFilters = {};
let localidades = [];

document.addEventListener('DOMContentLoaded', function() {
    loadLocalidades();
    loadPasswords();
    setupEventListeners();
    
    // Aplicar filtro da URL se existir
    const urlParams = new URLSearchParams(window.location.search);
    const categoria = urlParams.get('categoria');
    if (categoria) {
        document.getElementById('categoryFilter').value = categoria;
        currentFilters.categoria = categoria;
    }
});

function setupEventListeners() {
    // Busca com debounce
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', Utils.debounce(function() {
        currentFilters.busca = this.value;
        currentPage = 1;
        loadPasswords();
    }, 500));
    
    // Filtros
    document.getElementById('categoryFilter').addEventListener('change', function() {
        currentFilters.categoria = this.value;
        currentPage = 1;
        loadPasswords();
    });
    
    document.getElementById('localidadeFilter').addEventListener('change', function() {
        currentFilters.localidade_id = this.value;
        currentPage = 1;
        loadPasswords();
    });
    
    // Form submission
    document.getElementById('passwordForm').addEventListener('submit', handlePasswordSubmit);
}

async function loadLocalidades() {
    try {
        const { data } = await API.get('/localidades/select/opcoes');
        if (data.success) {
            localidades = data.data.localidades;
            updateLocalidadeSelects();
        }
    } catch (error) {
        console.error('Erro ao carregar localidades:', error);
    }
}

function updateLocalidadeSelects() {
    const selects = ['localidadeFilter', 'modalLocalidadeSelect'];
    
    selects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (select) {
            // Manter primeira opção
            const firstOption = select.querySelector('option');
            select.innerHTML = '';
            select.appendChild(firstOption);
            
            localidades.forEach(localidade => {
                const option = document.createElement('option');
                option.value = localidade.id;
                option.textContent = localidade.nome_localidade;
                select.appendChild(option);
            });
        }
    });
}

async function loadPasswords() {
    try {
        showTableLoading(true);
        
        const params = new URLSearchParams({
            pagina: currentPage,
            limite: 20,
            ...currentFilters
        });
        
        const { data } = await API.get(`/senhas?${params}`);
        
        if (data.success) {
            updatePasswordTable(data.data.senhas);
            updatePagination(data.data.paginacao);
        } else {
            UI.showAlert('Erro ao carregar senhas: ' + data.message, 'error');
        }
    } catch (error) {
        console.error('Erro ao carregar senhas:', error);
        UI.showAlert('Erro de conexão ao carregar senhas', 'error');
    } finally {
        showTableLoading(false);
    }
}

function updatePasswordTable(senhas) {
    const tbody = document.getElementById('passwordTableBody');
    const emptyState = document.getElementById('emptyState');
    
    if (senhas.length === 0) {
        tbody.innerHTML = '';
        emptyState.classList.remove('hidden');
        return;
    }
    
    emptyState.classList.add('hidden');
    
    tbody.innerHTML = senhas.map(senha => {
        const categoriaLabel = {
            'prefeituras': 'Prefeituras',
            'fornecedores': 'Fornecedores',
            'orgaos': 'Órgãos Gov.',
            'b2fleet': 'B2Fleet'
        }[senha.categoria] || senha.categoria;
        
        return `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4">
                    <div class="font-medium text-gray-900">${senha.sistema}</div>
                </td>
                <td class="px-6 py-4">
                    <span class="badge badge-info">${categoriaLabel}</span>
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">
                    ${senha.nome_localidade || '-'}
                </td>
                <td class="px-6 py-4 text-sm text-gray-900">
                    ${senha.usuario}
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">
                    ${senha.url ? `<a href="${senha.url}" target="_blank" class="text-blue-600 hover:text-blue-800"><i class="fas fa-external-link-alt"></i></a>` : '-'}
                </td>
                <td class="px-6 py-4 text-sm text-gray-500">
                    ${Utils.formatDate(senha.atualizado_em)}
                </td>
                <td class="px-6 py-4 text-sm font-medium space-x-2">
                    <button onclick="viewPassword('${senha.id}')" class="text-blue-600 hover:text-blue-900" title="Visualizar">
                        <i class="fas fa-eye"></i>
                    </button>
                    <% if (user.tipo_usuario === 'administrador') { %>
                    <button onclick="editPassword('${senha.id}')" class="text-yellow-600 hover:text-yellow-900" title="Editar">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="deletePassword('${senha.id}', '${senha.sistema}')" class="text-red-600 hover:text-red-900" title="Excluir">
                        <i class="fas fa-trash"></i>
                    </button>
                    <% } %>
                </td>
            </tr>
        `;
    }).join('');
}

function updatePagination(paginacao) {
    UI.updatePagination('paginationContainer', paginacao.pagina_atual, paginacao.total_paginas, 'changePage');
}

function changePage(page) {
    currentPage = page;
    loadPasswords();
}

function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('categoryFilter').value = '';
    document.getElementById('localidadeFilter').value = '';
    currentFilters = {};
    currentPage = 1;
    loadPasswords();
}

function showTableLoading(show) {
    const loading = document.getElementById('tableLoading');
    const tbody = document.getElementById('passwordTableBody');
    
    if (show) {
        loading.classList.remove('hidden');
        tbody.innerHTML = '';
    } else {
        loading.classList.add('hidden');
    }
}

function openPasswordModal(passwordId = null) {
    const modal = document.getElementById('passwordModal');
    const form = document.getElementById('passwordForm');
    const title = document.getElementById('modalTitle');
    
    FormHelpers.clear(form);
    
    if (passwordId) {
        title.textContent = 'Editar Senha';
        loadPasswordForEdit(passwordId);
    } else {
        title.textContent = 'Nova Senha';
        document.getElementById('passwordId').value = '';
    }
    
    UI.showModal('passwordModal');
}

async function loadPasswordForEdit(passwordId) {
    try {
        UI.showLoading(true);
        
        const { data } = await API.get(`/senhas/${passwordId}`);
        
        if (data.success) {
            const senha = data.data.senha;
            FormHelpers.populate('passwordForm', {
                ...senha,
                data_expiracao: Utils.formatDateForInput(senha.data_expiracao)
            });
            document.getElementById('passwordId').value = passwordId;
        } else {
            UI.showAlert('Erro ao carregar senha: ' + data.message, 'error');
        }
    } catch (error) {
        console.error('Erro ao carregar senha:', error);
        UI.showAlert('Erro de conexão ao carregar senha', 'error');
    } finally {
        UI.showLoading(false);
    }
}

async function handlePasswordSubmit(e) {
    e.preventDefault();
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const submitBtnText = document.getElementById('submitBtnText');
    const submitSpinner = document.getElementById('submitSpinner');
    
    try {
        submitBtn.disabled = true;
        submitBtnText.textContent = 'Salvando...';
        submitSpinner.classList.remove('hidden');
        
        const formData = FormHelpers.serialize(e.target);
        const passwordId = document.getElementById('passwordId').value;
        
        let response;
        if (passwordId) {
            response = await API.put(`/senhas/${passwordId}`, formData);
        } else {
            response = await API.post('/senhas', formData);
        }
        
        if (response.data.success) {
            UI.showAlert(passwordId ? 'Senha atualizada com sucesso!' : 'Senha criada com sucesso!', 'success');
            UI.closeModal('passwordModal');
            loadPasswords();
        } else {
            UI.showAlert(response.data.message || 'Erro ao salvar senha', 'error');
        }
    } catch (error) {
        console.error('Erro ao salvar senha:', error);
        UI.showAlert('Erro de conexão ao salvar senha', 'error');
    } finally {
        submitBtn.disabled = false;
        submitBtnText.textContent = 'Salvar';
        submitSpinner.classList.add('hidden');
    }
}

async function viewPassword(passwordId) {
    try {
        UI.showLoading(true);
        
        const { data } = await API.get(`/senhas/${passwordId}`);
        
        if (data.success) {
            const senha = data.data.senha;
            showPasswordDetails(senha);
        } else {
            UI.showAlert('Erro ao carregar senha: ' + data.message, 'error');
        }
    } catch (error) {
        console.error('Erro ao carregar senha:', error);
        UI.showAlert('Erro de conexão ao carregar senha', 'error');
    } finally {
        UI.showLoading(false);
    }
}

function showPasswordDetails(senha) {
    const container = document.getElementById('passwordDetails');
    
    container.innerHTML = `
        <div class="space-y-3">
            <div>
                <label class="text-sm font-medium text-gray-500">Sistema</label>
                <p class="text-gray-900">${senha.sistema}</p>
            </div>
            <div>
                <label class="text-sm font-medium text-gray-500">Usuário</label>
                <p class="text-gray-900">${senha.usuario}</p>
            </div>
            ${senha.senha_descriptografada ? `
            <div>
                <label class="text-sm font-medium text-gray-500">Senha</label>
                <div class="flex items-center space-x-2">
                    <input type="password" id="senhaDisplay" value="${senha.senha_descriptografada}" class="form-input" readonly>
                    <button onclick="togglePasswordVisibility('senhaDisplay')" class="text-gray-500">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button onclick="copyToClipboard('${senha.senha_descriptografada}')" class="text-blue-600" title="Copiar">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
            ` : ''}
            ${senha.url ? `
            <div>
                <label class="text-sm font-medium text-gray-500">URL</label>
                <p class="text-gray-900">
                    <a href="${senha.url}" target="_blank" class="text-blue-600 hover:text-blue-800">
                        ${senha.url} <i class="fas fa-external-link-alt ml-1"></i>
                    </a>
                </p>
            </div>
            ` : ''}
            ${senha.observacoes ? `
            <div>
                <label class="text-sm font-medium text-gray-500">Observações</label>
                <p class="text-gray-900">${senha.observacoes}</p>
            </div>
            ` : ''}
        </div>
    `;
    
    UI.showModal('viewPasswordModal');
}

function editPassword(passwordId) {
    openPasswordModal(passwordId);
}

function deletePassword(passwordId, sistema) {
    UI.confirm(`Tem certeza que deseja excluir a senha do sistema "${sistema}"?`, async () => {
        try {
            UI.showLoading(true);
            
            const { data } = await API.delete(`/senhas/${passwordId}`);
            
            if (data.success) {
                UI.showAlert('Senha excluída com sucesso!', 'success');
                loadPasswords();
            } else {
                UI.showAlert('Erro ao excluir senha: ' + data.message, 'error');
            }
        } catch (error) {
            console.error('Erro ao excluir senha:', error);
            UI.showAlert('Erro de conexão ao excluir senha', 'error');
        } finally {
            UI.showLoading(false);
        }
    });
}

function togglePasswordVisibility(inputId) {
    const input = document.getElementById(inputId);
    const button = input.nextElementSibling;
    const icon = button.querySelector('i');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        UI.showAlert('Senha copiada para a área de transferência!', 'success', 2000);
    }).catch(() => {
        UI.showAlert('Erro ao copiar senha', 'error');
    });
}
</script>

